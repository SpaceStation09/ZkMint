//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256
} from "@axiom-crypto/experimental/halo2-js";
const defaultInputs = { blockNumber: 9972628, txIdx: 7, logIdx: 0 };
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  blockNumber: CircuitValue;
  txIdx: CircuitValue;
  logIdx: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  { blockNumber, txIdx, logIdx }: CircuitValueInputs
) => {
  const { add, or, log } = halo2Lib;
  const { getReceipt, getTx, addToCallback } = axiomData;
  // event `event PlayerWin(uint256 indexed gameId, address player)`
  const eventSchema =
    "0xab752bc10a81e9689c5aa42e23d7ecd59799f9758c37855cc7f7b7a17c751f6d";

  let receipt = getReceipt(blockNumber, txIdx);
  let receiptLog = receipt.log(logIdx);

  let winnerSchema = receiptLog.topic(0, eventSchema);
  //get the data field in `PlayerWin` event
  let winner = receiptLog.data(0).toCircuitValue();

  //get the blockNumber for receipt
  let blockNum = receipt.blockNumber().toCircuitValue();
  //get the transaction `to` field to ensure the recipient is game contract
  let tx = getTx(blockNumber, txIdx);
  let txTo = tx.to().toCircuitValue();

  addToCallback(winnerSchema);
  addToCallback(winner);
  addToCallback(blockNum);
  addToCallback(txTo);
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  64,
  115,
  8,
  209,
  223,
  131,
  104,
  155,
  126,
  252,
  10,
  18,
  202,
  217,
  42,
  173,
  151,
  58,
  135,
  36,
  125,
  55,
  122,
  102,
  43,
  176,
  92,
  54,
  24,
  254,
  170,
  34,
  127,
  118,
  194,
  205,
  96,
  80,
  149,
  173,
  87,
  102,
  188,
  100,
  216,
  37,
  60,
  11,
  166,
  167,
  190,
  31,
  78,
  137,
  56,
  62,
  223,
  240,
  247,
  174,
  214,
  187,
  63,
  38,
  66,
  247,
  207,
  145,
  158,
  231,
  168,
  191,
  236,
  252,
  38,
  6,
  162,
  89,
  238,
  103,
  231,
  108,
  154,
  34,
  70,
  242,
  179,
  231,
  156,
  230,
  127,
  232,
  133,
  34,
  118,
  17,
  212,
  141,
  156,
  124,
  91,
  176,
  24,
  98,
  89,
  252,
  153,
  242,
  121,
  86,
  92,
  20,
  111,
  54,
  212,
  196,
  138,
  49,
  146,
  142,
  0,
  122,
  158,
  177,
  51,
  164,
  39,
  40,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  92,
  102,
  16,
  174,
  127,
  54,
  194,
  74,
  110,
  91,
  42,
  7,
  104,
  182,
  197,
  139,
  155,
  32,
  7,
  161,
  42,
  157,
  86,
  20,
  206,
  22,
  127,
  159,
  28,
  171,
  255,
  45,
  54,
  4,
  227,
  73,
  146,
  57,
  16,
  231,
  174,
  28,
  149,
  183,
  128,
  232,
  134,
  137,
  86,
  144,
  144,
  28,
  164,
  106,
  3,
  248,
  58,
  173,
  112,
  38,
  42,
  205,
  44,
  11,
  146,
  82,
  160,
  106,
  238,
  173,
  141,
  151,
  53,
  7,
  68,
  173,
  221,
  143,
  3,
  249,
  172,
  164,
  93,
  96,
  215,
  229,
  83,
  207,
  194,
  218,
  186,
  152,
  157,
  253,
  34,
  0,
  82,
  28,
  172,
  243,
  3,
  127,
  115,
  209,
  137,
  8,
  252,
  115,
  45,
  163,
  62,
  13,
  149,
  90,
  156,
  23,
  4,
  190,
  175,
  157,
  55,
  24,
  220,
  163,
  99,
  233,
  179,
  47,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  110,
  43,
  158,
  217,
  33,
  183,
  38,
  74,
  113,
  78,
  14,
  151,
  100,
  190,
  40,
  17,
  93,
  97,
  149,
  164,
  113,
  113,
  41,
  145,
  201,
  31,
  222,
  248,
  164,
  74,
  25,
  16,
  87,
  136,
  106,
  245,
  9,
  68,
  192,
  177,
  202,
  117,
  164,
  36,
  215,
  245,
  159,
  205,
  133,
  159,
  106,
  203,
  237,
  199,
  17,
  98,
  48,
  45,
  231,
  78,
  248,
  97,
  252,
  17,
  229,
  68,
  55,
  169,
  142,
  166,
  154,
  138,
  152,
  1,
  167,
  84,
  122,
  232,
  93,
  125,
  221,
  36,
  134,
  44,
  97,
  56,
  37,
  206,
  55,
  199,
  137,
  164,
  157,
  121,
  112,
  33,
  249,
  177,
  152,
  162,
  188,
  205,
  79,
  83,
  131,
  110,
  108,
  88,
  254,
  139,
  229,
  113,
  50,
  215,
  23,
  100,
  3,
  42,
  16,
  69,
  124,
  90,
  26,
  16,
  193,
  248,
  181,
  6
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
