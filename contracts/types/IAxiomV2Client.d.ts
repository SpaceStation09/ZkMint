/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAxiomV2ClientInterface extends ethers.utils.Interface {
  functions: {
    "axiomV2Callback(uint64,address,bytes32,uint256,bytes32[],bytes)": FunctionFragment;
    "axiomV2QueryAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "axiomV2Callback",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "axiomV2QueryAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "axiomV2Callback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "axiomV2QueryAddress",
    data: BytesLike
  ): Result;

  events: {
    "AxiomV2Call(uint64,address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AxiomV2Call"): EventFragment;
}

export type AxiomV2CallEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    sourceChainId: BigNumber;
    callerAddr: string;
    querySchema: string;
    queryId: BigNumber;
  }
>;

export class IAxiomV2Client extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAxiomV2ClientInterface;

  functions: {
    axiomV2Callback(
      sourceChainId: BigNumberish,
      callerAddr: string,
      querySchema: BytesLike,
      queryId: BigNumberish,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    axiomV2QueryAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  axiomV2Callback(
    sourceChainId: BigNumberish,
    callerAddr: string,
    querySchema: BytesLike,
    queryId: BigNumberish,
    axiomResults: BytesLike[],
    callbackExtraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  axiomV2QueryAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    axiomV2Callback(
      sourceChainId: BigNumberish,
      callerAddr: string,
      querySchema: BytesLike,
      queryId: BigNumberish,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    axiomV2QueryAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AxiomV2Call(uint64,address,bytes32,uint256)"(
      sourceChainId?: BigNumberish | null,
      callerAddr?: null,
      querySchema?: BytesLike | null,
      queryId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        sourceChainId: BigNumber;
        callerAddr: string;
        querySchema: string;
        queryId: BigNumber;
      }
    >;

    AxiomV2Call(
      sourceChainId?: BigNumberish | null,
      callerAddr?: null,
      querySchema?: BytesLike | null,
      queryId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        sourceChainId: BigNumber;
        callerAddr: string;
        querySchema: string;
        queryId: BigNumber;
      }
    >;
  };

  estimateGas: {
    axiomV2Callback(
      sourceChainId: BigNumberish,
      callerAddr: string,
      querySchema: BytesLike,
      queryId: BigNumberish,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    axiomV2QueryAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    axiomV2Callback(
      sourceChainId: BigNumberish,
      callerAddr: string,
      querySchema: BytesLike,
      queryId: BigNumberish,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    axiomV2QueryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
