/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IAxiomV2HeaderVerifier,
  IAxiomV2HeaderVerifierInterface,
} from "../IAxiomV2HeaderVerifier";

const _abi = [
  {
    inputs: [],
    name: "BlockHashWitnessNotRecent",
    type: "error",
  },
  {
    inputs: [],
    name: "BlockhashMmrKeccakDoesNotMatchProof",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimedMMRDoesNotMatchRecent",
    type: "error",
  },
  {
    inputs: [],
    name: "MmrEndBlockNotRecent",
    type: "error",
  },
  {
    inputs: [],
    name: "NoMoreRecentBlockhashMMR",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "axiomCoreAddress",
        type: "address",
      },
    ],
    name: "UpdateAxiomCoreAddress",
    type: "event",
  },
  {
    inputs: [],
    name: "getSourceChainId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proofMmrKeccak",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "snapshotPmmrSize",
            type: "uint32",
          },
          {
            internalType: "bytes32[]",
            name: "proofMmrPeaks",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "mmrComplementOrPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct IAxiomV2HeaderVerifier.MmrWitness",
        name: "mmrWitness",
        type: "tuple",
      },
    ],
    name: "verifyQueryHeaders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAxiomV2HeaderVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IAxiomV2HeaderVerifierInterface {
    return new utils.Interface(_abi) as IAxiomV2HeaderVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAxiomV2HeaderVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAxiomV2HeaderVerifier;
  }
}
