/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAxiomV2VerifierInterface extends ethers.utils.Interface {
  functions: {
    "isBlockHashValid((uint32,bytes32,bytes32,uint32,bytes32[]))": FunctionFragment;
    "isRecentBlockHashValid(uint32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isBlockHashValid",
    values: [
      {
        blockNumber: BigNumberish;
        claimedBlockHash: BytesLike;
        prevHash: BytesLike;
        numFinal: BigNumberish;
        merkleProof: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRecentBlockHashValid",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isBlockHashValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRecentBlockHashValid",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAxiomV2Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAxiomV2VerifierInterface;

  functions: {
    isBlockHashValid(
      witness: {
        blockNumber: BigNumberish;
        claimedBlockHash: BytesLike;
        prevHash: BytesLike;
        numFinal: BigNumberish;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRecentBlockHashValid(
      blockNumber: BigNumberish,
      claimedBlockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isBlockHashValid(
    witness: {
      blockNumber: BigNumberish;
      claimedBlockHash: BytesLike;
      prevHash: BytesLike;
      numFinal: BigNumberish;
      merkleProof: BytesLike[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRecentBlockHashValid(
    blockNumber: BigNumberish,
    claimedBlockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isBlockHashValid(
      witness: {
        blockNumber: BigNumberish;
        claimedBlockHash: BytesLike;
        prevHash: BytesLike;
        numFinal: BigNumberish;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRecentBlockHashValid(
      blockNumber: BigNumberish,
      claimedBlockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    isBlockHashValid(
      witness: {
        blockNumber: BigNumberish;
        claimedBlockHash: BytesLike;
        prevHash: BytesLike;
        numFinal: BigNumberish;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRecentBlockHashValid(
      blockNumber: BigNumberish,
      claimedBlockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isBlockHashValid(
      witness: {
        blockNumber: BigNumberish;
        claimedBlockHash: BytesLike;
        prevHash: BytesLike;
        numFinal: BigNumberish;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRecentBlockHashValid(
      blockNumber: BigNumberish,
      claimedBlockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
