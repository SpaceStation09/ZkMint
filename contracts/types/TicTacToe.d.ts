/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TicTacToeInterface extends ethers.utils.Interface {
  functions: {
    "createNewGame(address,address)": FunctionFragment;
    "gameById(uint256)": FunctionFragment;
    "gameId()": FunctionFragment;
    "getCurrentBoard(uint256)": FunctionFragment;
    "makeMove(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewGame",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gameById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeMove",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeMove", data: BytesLike): Result;

  events: {
    "Draw(uint256)": EventFragment;
    "NewGame(uint256,address,address)": EventFragment;
    "PlayerWin(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Draw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerWin"): EventFragment;
}

export type DrawEvent = TypedEvent<[BigNumber] & { gameId: BigNumber }>;

export type NewGameEvent = TypedEvent<
  [BigNumber, string, string] & {
    gameId: BigNumber;
    player1: string;
    player2: string;
  }
>;

export type PlayerWinEvent = TypedEvent<
  [BigNumber, string] & { gameId: BigNumber; player: string }
>;

export class TicTacToe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TicTacToeInterface;

  functions: {
    createNewGame(
      _player1: string,
      _player2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        gameBoard: BigNumber;
        player1: string;
        player2: string;
      }
    >;

    gameId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentBoard(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeMove(
      _move: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNewGame(
    _player1: string,
    _player2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      gameBoard: BigNumber;
      player1: string;
      player2: string;
    }
  >;

  gameId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBoard(
    _gameId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeMove(
    _move: BigNumberish,
    _gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewGame(
      _player1: string,
      _player2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gameById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        gameBoard: BigNumber;
        player1: string;
        player2: string;
      }
    >;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBoard(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeMove(
      _move: BigNumberish,
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Draw(uint256)"(
      gameId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { gameId: BigNumber }>;

    Draw(
      gameId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { gameId: BigNumber }>;

    "NewGame(uint256,address,address)"(
      gameId?: BigNumberish | null,
      player1?: null,
      player2?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { gameId: BigNumber; player1: string; player2: string }
    >;

    NewGame(
      gameId?: BigNumberish | null,
      player1?: null,
      player2?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { gameId: BigNumber; player1: string; player2: string }
    >;

    "PlayerWin(uint256,address)"(
      gameId?: BigNumberish | null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { gameId: BigNumber; player: string }
    >;

    PlayerWin(
      gameId?: BigNumberish | null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { gameId: BigNumber; player: string }
    >;
  };

  estimateGas: {
    createNewGame(
      _player1: string,
      _player2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameById(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBoard(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeMove(
      _move: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewGame(
      _player1: string,
      _player2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBoard(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeMove(
      _move: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
